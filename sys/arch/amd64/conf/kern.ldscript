/*	$OpenBSD: kern.ldscript,v 1.4 2014/11/17 23:54:32 guenther Exp $	*/

/*
 * Copyright (c) 2009 Tobias Weingartner <weingart@tepid.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64", "elf64-x86-64")
OUTPUT_ARCH(i386:x86-64)

/* Define how we want out ELF binary to look like. */
PHDRS
{
	text PT_LOAD FILEHDR PHDRS;
	rodata PT_LOAD;
	data PT_LOAD;
	bss PT_LOAD;
	openbsd_randomize PT_OPENBSD_RANDOMIZE;
	bitrig_ramdisk PT_BITRIG_TMPFS_RAMDISK;	/* filled by rdconfig(8) */
}

/*
 * If we want the text/rodata/data sections aligned on 2M boundaries,
 * we could use the following instead.  Note, file size would increase
 * due to necessary padding.
 *
 *__ALIGN_SIZE = 0x200000;
 */
__ALIGN_SIZE = 0x1000;
__kernel_base = 0xffffffff81000300;

/* We use physical address to jump to kernel */
start = LOADADDR(.text) + (start - __kernel_base);
ENTRY(start)
SECTIONS
{
	. = __kernel_base;
	.text :
	{
		*(.text .text.*)
	} :text
	PROVIDE (__etext = .);
	PROVIDE (etext = .);
	_etext = .;

	/* Move rodata to the next page, so we can nuke X and W bit on it */
	. = ALIGN(__ALIGN_SIZE);
	.rodata :
	{
		*(.rodata .rodata.*)
	} :rodata
	PROVIDE (erodata = .);
	_erodata = .;

	/* Move .random to the next page, so we can add W bit on it and .data */
	. = ALIGN(__ALIGN_SIZE);
	.openbsd.randomdata :
	{
		*(.openbsd.randomdata)
	} :openbsd_randomize :data

	.data :
	{
		*(.data .data.*)
	} :data
	. = ALIGN(__ALIGN_SIZE);
	__kernel_randomdata_phys = . & 0x7fffffff;
	.openbsd.randomdata : AT (__kernel_randomdata_phys)
	{
		*(.openbsd.randomdata)
	} :data :openbsd_randomize
	. = ALIGN(__ALIGN_SIZE);
	PROVIDE (edata = .);
	_edata = .;

	/* BSS starts right after padded data */
	.bss :
	{
		*(.bss .bss.*)
		*(COMMON)
		/* Align here to ensure that the .bss section occupies space
		 * up to _end.  Align after .bss to ensure correct alignment
		 * even if the .bss section disappears because there are no
		 * input sections.
		 */
		. = ALIGN(64 / 8);
	} :bss
	. = ALIGN(64 / 8);
	_end = .;
	PROVIDE (end = .);

	/* XXX - hack alert, since we are not C++, nuke these */
	/DISCARD/ :
	{
		*(.note.GNU-stack)
		*(.eh_frame)
	}
}
